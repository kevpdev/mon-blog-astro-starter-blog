---
import { getCollection } from 'astro:content';
import type { NavigationConfig } from '../types/navigation';
import HeaderLink from './HeaderLink.astro';
import FormattedSlug from './FormattedSlug.astro';

interface Props {
  navigation: NavigationConfig;
}

const { navigation } = Astro.props;

async function buildNavigationWithDynamicChildren(config: NavigationConfig) {
  const processedNav = [];
  
  for (const item of config) {
    // Skip disabled items
    if (item.enabled === false) continue;
    
    const navItem = { ...item };
    
    if ('dynamicChildren' in item && item.dynamicChildren) {
      const { collection, filter, sort, transform } = item.dynamicChildren;
      
      try {
        const entries = await getCollection(collection);
        let filteredEntries = filter ? entries.filter(filter) : entries;
        
        if (sort) {
          filteredEntries = filteredEntries.sort(sort);
        }
        
        navItem.children = transform 
          ? filteredEntries.map(transform)
          : filteredEntries.map(entry => ({
              label: entry.data.title || entry.slug,
              href: `/${collection}/${entry.slug}`,
              enabled: true
            }));
            
        // Filter enabled children
        navItem.children = navItem.children.filter(child => child.enabled !== false);
      } catch (error) {
        console.error(`Error loading dynamic children for ${item.label}:`, error);
        navItem.children = [];
      }
    }
    
    // Filter static children if they exist
    if (navItem.children && !('dynamicChildren' in item)) {
      navItem.children = navItem.children.filter(child => child.enabled !== false);
    }
    
    processedNav.push(navItem);
  }
  
  return processedNav;
}

const processedNavigation = await buildNavigationWithDynamicChildren(navigation);
---

<div class="nav-container">
  {processedNavigation.map((item) => (
    item.children && item.children.length > 0 ? (
      <div class="nav-dropdown">
        <HeaderLink href={item.href}>{item.label}</HeaderLink>
        <div class="nav-dropdown__content">
          {item.children.map((child) => (
            <a
              href={child.href}
              class="nav-dropdown__link"
              target={child.external ? '_blank' : undefined}
              rel={child.external ? 'noopener noreferrer' : undefined}
            >
              {child.label.includes('/') ? (
                <FormattedSlug slug={child.label} />
              ) : (
                child.label
              )}
            </a>
          ))}
        </div>
      </div>
    ) : (
      <HeaderLink 
        href={item.href}
        target={item.external ? '_blank' : undefined}
        rel={item.external ? 'noopener noreferrer' : undefined}
      >
        {item.label}
      </HeaderLink>
    )
  ))}
</div>