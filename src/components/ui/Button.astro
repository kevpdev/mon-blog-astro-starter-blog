---
export interface Props {
  class?: string;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
}

const { 
  class: className = '',
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  disabled = false,
  ...props 
} = Astro.props;

// Build Tailwind classes - Pure utility approach
const baseClasses = 'inline-flex items-center justify-center font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';

const variantClasses = {
  primary: 'bg-[rgb(var(--brand-primary))] text-[rgb(var(--text-inverse))] hover:bg-[rgb(var(--brand-primary-hover))] focus:ring-[rgb(var(--brand-primary))]',
  secondary: 'bg-[rgb(var(--brand-secondary))] text-[rgb(var(--text-inverse))] hover:bg-[rgb(var(--brand-secondary-hover))] focus:ring-[rgb(var(--brand-secondary))]',
  outline: 'border border-[rgb(var(--border-primary))] text-[rgb(var(--brand-primary))] hover:bg-[rgb(var(--brand-primary))] hover:text-[rgb(var(--text-inverse))] focus:ring-[rgb(var(--brand-primary))]',
  ghost: 'text-[rgb(var(--brand-primary))] hover:bg-[rgb(var(--bg-muted))] focus:ring-[rgb(var(--brand-primary))]'
};

const sizeClasses = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-base',
  lg: 'px-6 py-3 text-lg'
};

// Build class names
const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`;
---

{href ? (
  <a 
    href={href}
    role="button"
    class={classes}
    {...props}
  >
    <slot />
  </a>
) : (
  <button 
    type={type}
    disabled={disabled}
    class={classes}
    {...props}
  >
    <slot />
  </button>
)}