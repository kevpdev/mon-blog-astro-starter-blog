---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import Container from '../../../components/ui/Container.astro';
import PostCard from '../../../components/ui/PostCard.astro';
import Hero from '../../../components/ui/Hero.astro';
import Section from '../../../components/ui/Section.astro';
import ErrorMessage from '../../../components/ui/ErrorMessage.astro';
import { getPostsByTag, getAllTags } from '../../../utils/tags';
import { validateRequired, validateString, handleError, logError, createError } from '../../../utils/error-handler';

export async function getStaticPaths() {
  try {
    const allTags = await getAllTags();

    return allTags.map((tag) => ({
      params: {
        tag: tag
          .toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '')
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/^-+|-+$/g, '')
      },
      props: {
        originalTag: tag,
        tagSlug: tag
          .toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '')
          .replace(/[^a-z0-9]+/g, '-')
          .replace(/^-+|-+$/g, '')
      }
    }));
  } catch (error) {
    const appError = handleError(error);
    logError(appError, 'getStaticPaths for tag pages');
    throw createError('content', 'Impossible de charger les tags', appError.details);
  }
}

const { tag } = Astro.params;
const { originalTag } = Astro.props;

let posts: any[] = [];
let capitalizedTag = '';
let hasError = false;
let errorMessage = '';

try {
  validateRequired(tag, 'tag');
  validateRequired(originalTag, 'originalTag');
  validateString(tag, 'tag', 1, 100);
  validateString(originalTag, 'originalTag', 1, 100);

  // Récupérer tous les articles avec ce tag
  posts = await getPostsByTag(originalTag);
  capitalizedTag = originalTag.charAt(0).toUpperCase() + originalTag.slice(1);
} catch (error) {
  hasError = true;
  const appError = handleError(error);
  logError(appError, `Tag page: ${tag}`);
  errorMessage = appError.message;

  // En cas d'erreur, rediriger vers 404
  if (appError.type === 'validation') {
    return Astro.redirect('/404');
  }
}
---

<BaseLayout
  title={hasError ? 'Erreur - Tag' : `Articles avec le tag "${capitalizedTag}"`}
  description={hasError ? 'Une erreur est survenue lors du chargement de la page.' : `Découvrez tous les articles de blog avec le tag ${capitalizedTag}. ${posts.length} article${posts.length > 1 ? 's' : ''} trouvé${posts.length > 1 ? 's' : ''}.`}
>
  {hasError ? (
    <Section class="py-16">
      <Container size="md">
        <ErrorMessage
          title="Erreur lors du chargement"
          message={errorMessage}
          type="error"
        >
          <div class="mt-4">
            <a
              href="/blog"
              class="inline-flex items-center px-4 py-2 bg-[rgb(var(--brand-primary))] text-[rgb(var(--text-inverse))] rounded-lg hover:bg-[rgb(var(--brand-primary-hover))] transition-colors no-underline"
            >
              ← Retour au blog
            </a>
          </div>
        </ErrorMessage>
      </Container>
    </Section>
  ) : (
    <>
      <Hero
        title={`Tag: ${capitalizedTag}`}
        subtitle={`${posts.length} article${posts.length > 1 ? 's' : ''} trouvé${posts.length > 1 ? 's' : ''}`}
        centered={true}
      />

      <Section>
        <Container size="xl">
          {posts.length > 0 ? (
            <div class="content-grid-2 lg:grid-cols-3">
              {posts.map((post) => (
                <PostCard post={post} />
              ))}
            </div>
          ) : (
            <div class="text-center py-12">
              <h2 class="text-2xl font-semibold mb-4 text-[rgb(var(--text-primary))]">
                Aucun article trouvé
              </h2>
              <p class="text-[rgb(var(--text-secondary))] mb-6">
                Il n'y a actuellement aucun article avec le tag "{capitalizedTag}".
              </p>
              <a
                href="/blog"
                class="inline-flex items-center px-4 py-2 bg-[rgb(var(--brand-primary))] text-[rgb(var(--text-inverse))] rounded-lg hover:bg-[rgb(var(--brand-primary-hover))] transition-colors no-underline"
              >
                ← Retour au blog
              </a>
            </div>
          )}

          <div class="mt-12 text-center">
            <a
              href="/blog"
              class="inline-flex items-center px-4 py-2 bg-[rgb(var(--bg-muted))] text-[rgb(var(--text-primary))] rounded-lg hover:bg-[rgb(var(--brand-primary))] hover:text-[rgb(var(--text-inverse))] transition-colors no-underline"
            >
              ← Retour au blog
            </a>
          </div>
        </Container>
      </Section>
    </>
  )}
</BaseLayout>